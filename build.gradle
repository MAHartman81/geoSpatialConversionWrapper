apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
//apply plugin: 'release'

sourceCompatibility=1.7

//repositories {
//     maven {
//        url "https://nexus.gs.mil/nexus/content/groups/ods"
//        credentials {
//            username "gradle"
//            password "ods"
//        }
//    }
//}

repositories {
     mavenCentral()
     
     flatDir {
     	dirs 'C:\\dev\\GEOTRANS'
     }
}


jar {
    baseName 'geospatialconversions'
    manifest {
        attributes 'Implementation-Title': 'Geospatial Conversion', 'Implementation-Version': version
    }
}

dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.+'
    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.+'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.+'
    compile group: 'mil.nga.msp', name: 'geotrans', version: '3.7'  
    compile group: 'org.codehaus.jettison', name: 'jettison', version: '1.1'
    compile group: 'commons-io', name: 'commons-io', version: '2.+'
        
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

task ci (dependsOn: [
    clean
    ,build
    ,jacocoTestReport
    ,uploadArchives
])

//release.dependsOn clean
//createReleaseTag.dependsOn jacocoTestReport
//createReleaseTag.dependsOn uploadArchives

gradle.taskGraph.whenReady {taskGraph ->
    // Release builds use gradle.properties version and update it. Snapshots use Build_number from Jenkins, defaults to 0 for dev build    
    def components = version.split('\\.').collect { Integer.parseInt(it.replace('-SNAPSHOT', ''))}
    //Task graph happens twice when release is called
    if (taskGraph.hasTask(':release') || taskGraph.hasTask(':createReleaseTag')) {
        project.ext.set("releaseVersion", components.join('.')+"-RELEASE")
        components[2] += 1
        project.ext.set("newVersion", components.join('.')+"-SNAPSHOT")
    } else {
        def teamClassifier = System.getProperty("ODS_TEAM") ? "."+System.getProperty("ODS_TEAM") : ""
        version = components.join('.')+teamClassifier+"-SNAPSHOT"
    }
}

build.mustRunAfter clean
uploadArchives.mustRunAfter build

